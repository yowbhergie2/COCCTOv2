<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Holiday Manager</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script>
    window.CURRENT_PAGE = 'holiday-manager';
  </script>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f7fafc;
      margin: 0;
      padding: 0;
    }

    /* --- Modal Styles --- */
    .modal-backdrop {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(15, 23, 42, 0.55);
      z-index: 50;
      opacity: 0;
      transition: opacity 0.25s ease-in-out;
    }

    .modal {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.96);
      z-index: 60;
      opacity: 0;
      transition: opacity 0.25s ease-in-out, transform 0.25s ease-in-out;
      width: 100%;
      max-width: 28rem;
      max-height: 90vh;
      overflow-y: auto;
      border-radius: 0.75rem;
      box-shadow: 0 25px 50px -12px rgba(30, 41, 59, 0.35), 0 10px 15px -3px rgba(15, 23, 42, 0.25);
    }

    .modal-backdrop.show .modal {
      display: block;
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }

    .modal-backdrop.show {
      display: block;
      opacity: 1;
    }
    /* --- END Modal Styles --- */

    /* --- Badge Styles --- */
    .badge {
      padding: 4px 10px;
      border-radius: 6px;
      font-size: 12px;
      font-weight: 500;
    }

    .badge-regular { background-color: #fee2e2; color: #991b1b; }
    .badge-special { background-color: #fef3c7; color: #92400e; }
    .badge-local { background-color: #dbeafe; color: #1e40af; }
    .badge-nowork { background-color: #f3e8ff; color: #6b21a8; }
    .badge-halfday { background-color: #fce7f3; color: #9f1239; }
    .badge-suspended { background-color: #ffedd5; color: #9a3412; }
    /* --- END Badge Styles --- */

    /* --- Loading Indicator --- */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100; /* Above everything */
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
        pointer-events: none;
    }
    .loading-overlay.show {
        opacity: 1;
        pointer-events: auto;
    }
    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #1e3a8a; /* Blue color */
        animation: spin 1s ease infinite;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    /* --- END Loading Indicator --- */
  </style>
</head>
<body class="bg-gray-100">

  <!-- Loading Indicator -->
  <div id="loadingOverlay" class="loading-overlay">
      <div class="spinner"></div>
  </div>

  <!-- Page-specific content starts here -->
  <div class="p-6">
      <div class="mb-6">
        <h4 class="text-2xl font-semibold text-gray-800 flex items-center gap-2">
          <i class="bi bi-calendar-event text-blue-600"></i> Holiday & No‑Work Day Manager
        </h4>
        <button type="button" class="px-4 py-2 bg-gray-600 text-white font-medium rounded-md shadow-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors" onclick="backToDashboard()">
          <i class="bi bi-arrow-left-circle"></i> Back to Dashboard
        </button>
        <p class="text-sm text-gray-600 mt-1">Manage holidays and special non-working days for accurate COC computation</p>
      </div>

      <!-- Add Holiday Button -->
      <div class="mb-6">
        <button type="button" id="addHolidayBtn" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white font-medium rounded-lg shadow hover:bg-blue-700 transition-colors">
          <i class="bi bi-plus-circle"></i> Add New Holiday
        </button>
      </div>

      <!-- Holiday List -->
      <div class="bg-white rounded-xl shadow-md p-6">
        <div class="text-lg font-semibold text-gray-800 mb-4 pb-3 border-b border-gray-200 flex items-center justify-between">
          <span><i class="bi bi-list text-blue-600"></i> Existing Holidays / No‑Work Days</span>
          <button type="button" id="refreshBtn" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md transition-colors">
            <i class="bi bi-arrow-clockwise"></i> Refresh
          </button>
        </div>

        <div class="mb-4">
          <input type="text" id="searchBox" placeholder="Search by date, type, or description..." class="w-full md:w-96 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200" id="holidayTable">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Additional Info</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="holidayTableBody">
              <!-- rows inserted dynamically -->
            </tbody>
          </table>
        </div>

        <div id="noHolidaysMsg" class="hidden text-center py-8 text-gray-500">
          <i class="bi bi-calendar-x text-4xl mb-2"></i>
          <p>No holidays defined yet. Click "Add New Holiday" to get started.</p>
        </div>
      </div>
    </div>
    <!-- Page-specific content ends here -->

  </div>
  <!-- END Main Content -->


  <!-- Add/Edit Holiday Modal -->
  <div id="holidayModal" class="modal-backdrop">
    <div class="modal">
      <div class="bg-white rounded-lg shadow-xl w-full mx-4" style="max-width: 600px;">
        <div id="modalHeader" class="bg-blue-600 text-white px-6 py-4 rounded-t-lg flex items-center justify-between">
          <h3 id="modalTitle" class="text-lg font-semibold">Add Holiday</h3>
          <button id="closeModalBtn" class="text-white hover:text-gray-200 transition-colors">
            <i class="bi bi-x-lg text-xl"></i>
          </button>
        </div>
        <div class="p-6">
          <form id="holidayForm">
            <!-- Form fields remain the same -->
             <!-- Date -->
            <div class="mb-4">
              <label for="holidayDate" class="block text-sm font-medium text-gray-700 mb-1">
                Date <span class="text-red-500">*</span>
              </label>
              <input type="date" id="holidayDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <!-- Type -->
            <div class="mb-4">
              <label for="holidayType" class="block text-sm font-medium text-gray-700 mb-1">
                Type <span class="text-red-500">*</span>
              </label>
              <select id="holidayType" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Regular">Regular Holiday (1.5x multiplier)</option>
                <option value="Special Non-Working">Special Non‑Working (1.5x multiplier)</option>
                <option value="Local">Local Holiday (1.5x multiplier)</option>
                <option value="No Work">No Work / Typhoon (1.0x multiplier)</option>
                <option value="Half-day">Half-day (1.5x after specified time)</option>
                <option value="Work Suspended">Work Suspended (1.0x multiplier)</option>
              </select>
              <p class="text-xs text-gray-500 mt-1">The multiplier determines how COC is calculated for work on this day</p>
            </div>
            <!-- Description -->
            <div class="mb-4">
              <label for="holidayDesc" class="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <input type="text" id="holidayDesc" placeholder="e.g., Christmas Day, Local festival, Typhoon Odette" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            <!-- Half-day time -->
            <div id="halfdayTimeGroup" class="mb-4 hidden">
              <label for="halfdayStartTime" class="block text-sm font-medium text-gray-700 mb-1">
                Half-day Starts At <span class="text-red-500">*</span>
              </label>
              <input type="time" id="halfdayStartTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <p class="text-xs text-gray-500 mt-1">Time when the half-day begins (e.g., 12:00 for afternoon)</p>
            </div>
            <!-- Work Suspended time -->
            <div id="suspensionTimeGroup" class="mb-4 hidden">
              <label for="suspensionTime" class="block text-sm font-medium text-gray-700 mb-1">
                Work Suspended At <span class="text-red-500">*</span>
              </label>
              <input type="time" id="suspensionTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <p class="text-xs text-gray-500 mt-1">Time when work was suspended (e.g., 14:00)</p>
            </div>
            <!-- Remarks -->
            <div class="mb-4">
              <label for="holidayRemarks" class="block text-sm font-medium text-gray-700 mb-1">
                Additional Remarks
              </label>
              <textarea id="holidayRemarks" rows="2" placeholder="Any additional notes or context" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
            </div>
          </form>
        </div>
        <div class="px-6 pb-6 flex justify-end gap-3">
          <button type="button" id="cancelBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
            Cancel
          </button>
          <button type="button" id="saveBtn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            <i class="bi bi-check-circle"></i> Save Holiday
          </button>
        </div>
      </div>
    </div>
  </div>
  <!-- END Add/Edit Holiday Modal -->

  <!-- Response Modal -->
  <div id="responseModal" class="modal-backdrop">
    <div class="modal">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
        <div id="responseModalHeader" class="px-6 py-4 rounded-t-lg flex items-center justify-between">
          <h3 id="responseModalTitle" class="text-lg font-semibold">Message</h3>
          <button id="closeResponseModalBtn" class="hover:opacity-75 transition-opacity">
            <i class="bi bi-x-lg text-xl"></i>
          </button>
        </div>
        <div class="p-6">
          <div id="responseModalBody"></div>
        </div>
        <div class="px-6 pb-6 flex justify-end">
          <button id="responseModalOkBtn" class="px-4 py-2 rounded-lg transition-colors">OK</button>
        </div>
      </div>
    </div>
  </div>
  <!-- END Response Modal -->

  <!-- Confirm Delete Modal -->
  <div id="confirmModal" class="modal-backdrop">
    <div class="modal">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
        <div class="bg-red-600 text-white px-6 py-4 rounded-t-lg flex items-center justify-between">
          <h3 class="text-lg font-semibold"><i class="bi bi-exclamation-triangle"></i> Confirm Deletion</h3>
          <button id="closeConfirmModalBtn" class="text-white hover:text-gray-200 transition-colors">
            <i class="bi bi-x-lg text-xl"></i>
          </button>
        </div>
        <div class="p-6">
          <div id="confirmModalBody"></div>
        </div>
        <div class="px-6 pb-6 flex justify-end gap-3">
          <button id="confirmCancelBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
            Cancel
          </button>
          <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
            <i class="bi bi-trash"></i> Delete
          </button>
        </div>
      </div>
    </div>
  </div>
  <!-- END Confirm Delete Modal -->

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    let editingRow = null;
    let allHolidays = [];

    // --- Loading Overlay ---
    function showLoading() {
        $('#loadingOverlay').addClass('show');
    }
    function hideLoading() {
        $('#loadingOverlay').removeClass('show');
    }

    // --- Navigation Override for shared layout ---
    window.__navigateToOverride = function(pageName, displayName) {
      const overlay = $('#loadingOverlay');
      if (overlay.hasClass('show')) return;

      const targetName = displayName || pageName;
      console.log('Navigating to:', targetName);
      showLoading();

      if (typeof google !== 'undefined' && google.script && google.script.run) {
        google.script.run
          .withSuccessHandler(function() {
            hideLoading();
            console.log('Navigation function called successfully for:', targetName);
          })
          .withFailureHandler(function(err) {
            hideLoading();
            console.error('Navigation failed:', err);
            showResponseModal('Navigation Error', 'Could not navigate to ' + targetName + '. Error: ' + (err.message || err), 'danger');
          })
          .navigateToPage(pageName);
      } else {
        console.warn('google.script.run not available, simulating navigation for', targetName);
        hideLoading();
      }
    };
    // --- END Navigation Override ---


    // --- Modal Functions ---
    function showModal(edit = false, holidayData = null) {
      $('body').css('overflow', 'hidden');
      if (edit && holidayData) {
        $('#modalTitle').text('Edit Holiday');
        $('#holidayDate').val(holidayData.dateISO);
        $('#holidayType').val(holidayData.type);
        $('#holidayDesc').val(holidayData.description || '');
        $('#halfdayStartTime').val(holidayData.halfdayTime || '');
        $('#suspensionTime').val(holidayData.suspensionTime || '');
        $('#holidayRemarks').val(holidayData.remarks || '');
        editingRow = holidayData.rowNumber;
      } else {
        $('#modalTitle').text('Add New Holiday');
        $('#holidayForm')[0].reset();
        editingRow = null;
      }
      $('#holidayType').trigger('change');
      $('#holidayModal').addClass('show');
    }
    function closeModal() {
      $('body').css('overflow', 'auto');
      $('#holidayModal').removeClass('show');
      $('#holidayForm')[0].reset();
      editingRow = null;
    }
    function showResponseModal(title, message, type) {
      $('body').css('overflow', 'hidden');
      $('#responseModalTitle').text(title);
      $('#responseModalBody').html(message.replace(/\n/g, '<br>'));
      const colors = {
        'success': { header: 'bg-green-600 text-white', button: 'bg-green-600 hover:bg-green-700 text-white' },
        'danger': { header: 'bg-red-600 text-white', button: 'bg-red-600 hover:bg-red-700 text-white' },
        'warning': { header: 'bg-yellow-500 text-white', button: 'bg-yellow-500 hover:bg-yellow-600 text-white' },
        'info': { header: 'bg-blue-600 text-white', button: 'bg-blue-600 hover:bg-blue-700 text-white' }
      };
      const colorScheme = colors[type] || colors['info'];
      $('#responseModalHeader').removeClass('bg-green-600 bg-red-600 bg-yellow-500 bg-blue-600 text-white').addClass(colorScheme.header);
      $('#responseModalOkBtn').removeClass('bg-green-600 hover:bg-green-700 bg-red-600 hover:bg-red-700 bg-yellow-500 hover:bg-yellow-600 bg-blue-600 hover:bg-blue-700 text-white').addClass(colorScheme.button);
      $('#responseModal').addClass('show');
    }
    function closeResponseModal() {
      if ($('#holidayModal.show').length === 0 && $('#confirmModal.show').length === 0) {
        $('body').css('overflow', 'auto');
      }
      $('#responseModal').removeClass('show');
    }
    function closeConfirmModal() {
        $('body').css('overflow', 'auto');
        $('#confirmModal').removeClass('show');
    }
    // --- END Modal Functions ---

    // --- Data Functions (API calls, Rendering) ---
    const gscript = window.google && google.script && google.script.run;
    function mockApi(apiCall, ...args) { /* Mock function remains the same */
        console.warn(`Mocking ${apiCall} as google.script.run is not available.`);
        let successHandler = (result) => console.log('Mock success:', result);
        let failureHandler = (err) => console.error('Mock failure:', err);
        const handlerProxy = {
            withSuccessHandler: (sHandler) => { successHandler = sHandler; return { withFailureHandler: (fHandler) => failureHandler = fHandler }; },
            withFailureHandler: (fHandler) => { failureHandler = fHandler; return { withSuccessHandler: (sHandler) => successHandler = sHandler }; }
        };
        const api = {
            apiListHolidays: () => { const mockData = [ { rowNumber: 2, date: '2025-12-25T12:00:00.000Z', dateISO: '2025-12-25', type: 'Regular', description: 'Christmas Day', halfdayTime: '', suspensionTime: '', remarks: '' }, { rowNumber: 3, date: '2025-12-26T12:00:00.000Z', dateISO: '2025-12-26', type: 'Special Non-Working', description: 'Day after Christmas', halfdayTime: '', suspensionTime: '', remarks: 'Test remark' } ]; setTimeout(() => successHandler(mockData), 500); },
            apiAddHoliday: () => setTimeout(() => successHandler('OK'), 500),
            apiUpdateHoliday: () => setTimeout(() => successHandler('OK'), 500),
            apiDeleteHoliday: () => setTimeout(() => successHandler('OK'), 500)
        };
        if (api[apiCall]) { api[apiCall](...args); }
        return handlerProxy;
    }
    function callApi(apiCall, ...args) {
        const handlers = { success: null, failure: null };
        const invoke = () => {
            if (gscript) {
                let runner = gscript;
                if (handlers.success) { runner = runner.withSuccessHandler(handlers.success); }
                if (handlers.failure) { runner = runner.withFailureHandler(handlers.failure); }
                if (typeof runner[apiCall] === 'function') {
                    runner[apiCall](...args);
                    return;
                }
                console.error(`google.script.run.${apiCall} is not a function.`);
            }
            const mockRunner = mockApi(apiCall, ...args);
            if (handlers.success) { mockRunner.withSuccessHandler(handlers.success); }
            if (handlers.failure) { mockRunner.withFailureHandler(handlers.failure); }
        };

        return {
            withSuccessHandler(callback) {
                handlers.success = callback;
                return this;
            },
            withFailureHandler(callback) {
                handlers.failure = callback;
                invoke();
                return this;
            },
            run() {
                invoke();
                return this;
            }
        };
    }

    // --- REVISED loadHolidays ---
    function loadHolidays() {
      showLoading(); // Show spinner before API call
      callApi('apiListHolidays')
          .withSuccessHandler(function(list) {
              try {
                  allHolidays = (list || []).map(item => ({ ...item, dateISO: item.dateISO || (item.date ? new Date(item.date).toISOString().split('T')[0] : null) }));
                  renderHolidays(allHolidays);
              } catch (renderError) {
                  console.error("Error rendering holidays:", renderError);
                  showResponseModal('Render Error', 'Could not display holidays after loading.', 'danger');
              } finally {
                  hideLoading(); // Hide AFTER attempting to render
              }
          })
          .withFailureHandler(function(err) {
              showResponseModal('Error', err.message || 'An unknown error occurred loading holidays.', 'danger');
              hideLoading(); // Hide on API failure
          });
    }
    // --- END REVISED loadHolidays ---


    function renderHolidays(holidays) { /* renderHolidays function remains the same */
      const tbody = $('#holidayTableBody');
      tbody.empty();
      if (!holidays || holidays.length === 0) { $('#noHolidaysMsg').removeClass('hidden'); $('#holidayTable').addClass('hidden'); return; }
      $('#noHolidaysMsg').addClass('hidden'); $('#holidayTable').removeClass('hidden');
      // holidays.sort((a, b) => new Date(b.date) - new Date(a.date)); // Already sorted by API
      holidays.forEach(function(item) {
        if (!item.date) { console.warn("Skipping holiday item with no date:", item); return; }
        const date = new Date(item.date);
        const formatted = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
        const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'short' });
        let badgeClass = 'badge-regular';
        if (item.type === 'Special Non-Working') badgeClass = 'badge-special';
        else if (item.type === 'Local') badgeClass = 'badge-local';
        else if (item.type === 'No Work') badgeClass = 'badge-nowork';
        else if (item.type === 'Half-day') badgeClass = 'badge-halfday';
        else if (item.type === 'Work Suspended') badgeClass = 'badge-suspended';
        let additionalInfo = '';
        if (item.type === 'Half-day' && item.halfdayTime) { additionalInfo = `<span class="text-xs text-gray-600">Starts at ${item.halfdayTime}</span>`; }
        else if (item.type === 'Work Suspended' && item.suspensionTime) { additionalInfo = `<span class="text-xs text-gray-600">Suspended at ${item.suspensionTime}</span>`; }
        if (item.remarks) { additionalInfo += (additionalInfo ? '<br>' : '') + `<span class="text-xs text-gray-500 italic">${item.remarks}</span>`; }
        const tr = $('<tr>').addClass('hover:bg-gray-50');
        tr.append('<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">' + formatted + '</td>');
        tr.append('<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">' + dayOfWeek + '</td>');
        tr.append('<td class="px-6 py-4 whitespace-nowrap"><span class="badge ' + badgeClass + '">' + item.type + '</span></td>');
        tr.append('<td class="px-6 py-4 text-sm text-gray-900">' + (item.description || '<span class="text-gray-400 italic">No description</span>') + '</td>');
        tr.append('<td class="px-6 py-4 text-sm">' + (additionalInfo || '<span class="text-gray-400">—</span>') + '</td>');
        const actions = $('<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium"></td>');
        const editBtn = $('<button class="text-blue-600 hover:text-blue-900 mr-3 transition-colors"><i class="bi bi-pencil"></i> Edit</button>');
        editBtn.on('click', function() { showModal(true, item); });
        const delBtn = $('<button class="text-red-600 hover:text-red-900 transition-colors"><i class="bi bi-trash"></i> Delete</button>');
        delBtn.on('click', function() { showDeleteConfirmation(item); });
        actions.append(editBtn, delBtn);
        tr.append(actions);
        tbody.append(tr);
      });
    }
    $('#searchBox').on('keyup', function() { /* searchBox function remains the same */
      const searchTerm = $(this).val().toLowerCase();
      if (!searchTerm) { renderHolidays(allHolidays); return; }
      const filtered = allHolidays.filter(h => { const date = h.date ? new Date(h.date).toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' }).toLowerCase() : ''; const type = (h.type || '').toLowerCase(); const desc = (h.description || '').toLowerCase(); const remarks = (h.remarks || '').toLowerCase(); return date.includes(searchTerm) || type.includes(searchTerm) || desc.includes(searchTerm) || remarks.includes(searchTerm); });
      renderHolidays(filtered);
    });
    function showDeleteConfirmation(holiday) { /* showDeleteConfirmation function remains the same */
      $('body').css('overflow', 'hidden');
      const date = new Date(holiday.date);
      const formatted = date.toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' });
      $('#confirmModalBody').html(`Are you sure you want to delete this holiday?<br><br><strong>Date:</strong> ${formatted}<br><strong>Type:</strong> ${holiday.type}<br>${holiday.description ? '<strong>Description:</strong> ' + holiday.description : ''}`);
      $('#confirmModal').addClass('show');
      $('#confirmDeleteBtn').off('click').on('click', function() {
        closeConfirmModal();
        deleteHoliday(holiday.rowNumber);
      });
    }

    // --- REVISED deleteHoliday ---
    function deleteHoliday(rowNumber) {
        showLoading(); // Show before call
        callApi('apiDeleteHoliday', rowNumber)
            .withSuccessHandler(function() {
                showResponseModal('Success', 'Holiday deleted successfully.', 'success');
                // Don't hide loading here, loadHolidays will handle it
                loadHolidays(); // Reload holidays after delete
            })
            .withFailureHandler(function(err) {
                showResponseModal('Error', err.message || 'An unknown error occurred deleting the holiday.', 'danger');
                hideLoading(); // Hide only on failure
            });
    }
    // --- END REVISED deleteHoliday ---

    // --- REVISED saveHoliday ---
    function saveHoliday() {
        const dateVal = $('#holidayDate').val();
        const type = $('#holidayType').val();
        const desc = $('#holidayDesc').val().trim();
        const halfdayTime = $('#halfdayStartTime').val();
        const suspensionTime = $('#suspensionTime').val();
        const remarks = $('#holidayRemarks').val().trim();
        if (!dateVal) { showResponseModal('Validation Error', 'Please select a date.', 'warning'); return; }
        if (type === 'Half-day' && !halfdayTime) { showResponseModal('Validation Error', 'Please specify when the half-day starts.', 'warning'); return; }
        if (type === 'Work Suspended' && !suspensionTime) { showResponseModal('Validation Error', 'Please specify when work was suspended.', 'warning'); return; }
        const dateObj = new Date(dateVal + 'T12:00:00'); // Use noon to avoid timezone issues

        showLoading(); // Show loading before API call

        if (editingRow) {
            callApi('apiUpdateHoliday', editingRow, dateObj, type, desc, halfdayTime, suspensionTime, remarks)
                .withSuccessHandler(function() {
                    showResponseModal('Success', 'Holiday updated successfully.', 'success');
                    closeModal();
                    // Don't hide loading here, loadHolidays will handle it
                    loadHolidays();
                })
                .withFailureHandler(function(err) {
                    showResponseModal('Error', err.message || 'An unknown error occurred updating the holiday.', 'danger');
                    hideLoading(); // Hide only on failure
                });
        } else {
            callApi('apiAddHoliday', dateObj, type, desc, halfdayTime, suspensionTime, remarks)
                .withSuccessHandler(function() {
                    showResponseModal('Success', 'Holiday added successfully.', 'success');
                    closeModal();
                    // Don't hide loading here, loadHolidays will handle it
                    loadHolidays();
                })
                .withFailureHandler(function(err) {
                    showResponseModal('Error', err.message || 'An unknown error occurred adding the holiday.', 'danger');
                    hideLoading(); // Hide only on failure
                });
        }
    }
    // --- END REVISED saveHoliday ---

    // --- END Data Functions ---


    // --- Event Handlers ---
    $(document).ready(function() {
      loadHolidays(); // Load data when the page is ready

      // Show/hide conditional fields based on holiday type
      $('#holidayType').on('change', function() {
        const type = $(this).val();
        $('#halfdayTimeGroup').toggleClass('hidden', type !== 'Half-day');
        $('#suspensionTimeGroup').toggleClass('hidden', type !== 'Work Suspended');
      });

      // Modal/Button triggers
      $('#addHolidayBtn').on('click', () => showModal(false));
      $('#refreshBtn').on('click', loadHolidays); // Refresh button calls loadHolidays again
      $('#saveBtn').on('click', saveHoliday);
      $('#cancelBtn, #closeModalBtn').on('click', closeModal);
      $('#closeResponseModalBtn, #responseModalOkBtn').on('click', closeResponseModal);
      $('#closeConfirmModalBtn, #confirmCancelBtn').on('click', closeConfirmModal);

      // Close modals on backdrop click
      $('#holidayModal, #responseModal, #confirmModal').on('click', function(e) {
        if (e.target === this) {
          if (this.id === 'holidayModal') closeModal();
          else if (this.id === 'responseModal') closeResponseModal();
          else if (this.id === 'confirmModal') closeConfirmModal();
        }
      });
    });
    // --- END Event Handlers ---
  </script>


  <script>
    // Back to Dashboard function
    function backToDashboard() {
      if (typeof google !== 'undefined' && google.script && google.script.run) {
        google.script.run.navigateToPage('Dashboard');
      } else {
        window.location.href = 'dashboard_no_sidebar.html';
      }
    }
  </script>

</body>
</html>
